import json
import os
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QTextEdit, QPushButton, QApplication
)
from PySide6.QtCore import QMetaObject
from PySide6.QtGui import QFont
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from datetime import datetime
import sys

class MonthlyAnalysisWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Monthly Analysis")
        self.resize(800, 600)
        self.setup_ui()
        self.load_data()
        self.populate_months()
        self.btn_generate.clicked.connect(self.perform_analysis)
        self.btn_back.clicked.connect(self.close)

    def setup_ui(self):
        self.layout = QVBoxLayout(self)

        month_layout = QHBoxLayout()
        self.label_month = QLabel("Select Month:")
        font = QFont()
        font.setBold(True)
        font.setPointSize(10)
        self.label_month.setFont(font)
        month_layout.addWidget(self.label_month)

        self.combo_month = QComboBox()
        month_layout.addWidget(self.combo_month)
        self.layout.addLayout(month_layout)

        self.textEdit_summary = QTextEdit()
        self.textEdit_summary.setReadOnly(True)
        self.textEdit_summary.setPlaceholderText("Summary will appear here")
        self.layout.addWidget(self.textEdit_summary)

        self.plot_widget = QWidget()
        self.layout.addWidget(self.plot_widget)

        self.btn_generate = QPushButton("Generate Monthly Analysis")
        self.layout.addWidget(self.btn_generate)

        self.btn_back = QPushButton("Back")
        self.layout.addWidget(self.btn_back)

        QMetaObject.connectSlotsByName(self)

    def load_data(self):
        self.data_path = "data/demo_data.json"
        if os.path.exists(self.data_path):
            with open(self.data_path, "r", encoding="utf-8") as file:
                self.data = json.load(file)
        else:
            self.data = {}

    def populate_months(self):
        months = sorted(set(date[:7] for date in self.data.keys()))
        self.combo_month.addItems(months)

    def perform_analysis(self):
        month = self.combo_month.currentText()
        if not month:
            return

        filtered = {d: v for d, v in self.data.items() if d.startswith(month)}
        if not filtered:
            self.textEdit_summary.setText("No data for the selected month.")
            return

        alertness = [v.get("alertness_score", 0) for v in filtered.values() if v.get("alertness_score") is not None]
        stress = [v.get("stress_level", 0) for v in filtered.values() if v.get("stress_level") is not None]
        sleep_durations = []
        risk_notes = []

        for date, entry in filtered.items():
            sleep_time = entry.get("sleep_time")
            wake_time = entry.get("wake_time")
            note = entry.get("note", "")
            if sleep_time and wake_time:
                try:
                    st = datetime.strptime(sleep_time, "%H:%M")
                    wt = datetime.strptime(wake_time, "%H:%M")
                    duration = (wt - st).seconds / 3600 if wt > st else (wt - st).seconds / 3600 + 24
                    sleep_durations.append(duration)
                except:
                    pass

            # Risk detection
            if any(keyword in note.lower() for keyword in ["suicide", "die", "hopeless", "give up"]):
                risk_notes.append((date, note))

        summary = (
            f"Total entries: {len(filtered)}\n"
            f"Average Alertness Score: {sum(alertness)/len(alertness):.2f}\n"
            f"Average Stress Level: {sum(stress)/len(stress):.2f}\n"
            f"Average Sleep Duration: {sum(sleep_durations)/len(sleep_durations):.2f} hours\n"
        )

        if risk_notes:
            summary += "\n⚠️ Risk Notes Detected:\n"
            for date, note in risk_notes:
                summary += f"- {date}: {note}\n"

        self.textEdit_summary.setText(summary)
        self.draw_plot(list(filtered.keys()), alertness, stress, sleep_durations)

    def draw_plot(self, dates, alertness, stress, sleep_durations):
        from matplotlib.figure import Figure
        from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg

        for i in reversed(range(self.plot_widget.layout().count() if self.plot_widget.layout() else 0)):
            self.plot_widget.layout().itemAt(i).widget().deleteLater()

        fig = Figure(figsize=(6, 4))
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)

        ax.plot(dates[:len(alertness)], alertness, label="Alertness", marker="o")
        ax.plot(dates[:len(stress)], stress, label="Stress", marker="s")
        ax.plot(dates[:len(sleep_durations)], sleep_durations, label="Sleep Duration", marker="^")

        ax.set_xlabel("Date")
        ax.set_ylabel("Score / Hours")
        ax.set_title("Monthly Trends")
        ax.legend()
        ax.tick_params(axis='x', rotation=45)

        layout = QVBoxLayout()
        layout.addWidget(canvas)
        self.plot_widget.setLayout(layout)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MonthlyAnalysisWindow()
    window.show()
    sys.exit(app.exec())
