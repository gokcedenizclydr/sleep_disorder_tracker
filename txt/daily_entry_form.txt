import os
import json
from PySide6.QtCore import QDate, QTime, QRect, QSize, QCoreApplication, QMetaObject, Qt
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QScrollArea, QLabel, QDateEdit,
    QSpacerItem, QSizePolicy, QGroupBox, QGridLayout, QTimeEdit,
    QSpinBox, QLineEdit, QComboBox, QCheckBox, QPlainTextEdit,
    QPushButton, QHBoxLayout, QApplication, QMessageBox
)

class Ui_Form(object):
    def setupUi(self, Form):
        if not Form.objectName():
            Form.setObjectName(u"Form")
        Form.resize(900, 616)
        self.verticalLayout_main = QVBoxLayout(Form)
        self.scrollArea = QScrollArea(Form)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QWidget()
        self.scrollAreaWidgetContents.setGeometry(QRect(0, 0, 868, 745))
        self.verticalLayout_scroll = QVBoxLayout(self.scrollAreaWidgetContents)

        # Date
        self.horizontalLayout_date = QHBoxLayout()
        self.spacer_left = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.label_date = QLabel(self.scrollAreaWidgetContents)
        self.label_date.setText("Date:")
        self.dateEdit = QDateEdit(self.scrollAreaWidgetContents)
        self.spacer_right = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_date.addItem(self.spacer_left)
        self.horizontalLayout_date.addWidget(self.label_date)
        self.horizontalLayout_date.addWidget(self.dateEdit)
        self.horizontalLayout_date.addItem(self.spacer_right)
        self.verticalLayout_scroll.addLayout(self.horizontalLayout_date)

        # Sleep Info
        self.groupBox_sleep = QGroupBox("Sleep Info", self.scrollAreaWidgetContents)
        self.gridLayout_sleep = QGridLayout(self.groupBox_sleep)
        self.label_sleep_time = QLabel("Sleep Time :", self.groupBox_sleep)
        self.timeEdit_sleep = QTimeEdit(self.groupBox_sleep)
        self.label_wake_time = QLabel("Wake-up Time:", self.groupBox_sleep)
        self.timeEdit_wake = QTimeEdit(self.groupBox_sleep)
        self.label_quality = QLabel("Sleep Quality :", self.groupBox_sleep)
        self.spinBox_quality = QSpinBox(self.groupBox_sleep)
        self.spinBox_quality.setRange(1, 10)
        self.gridLayout_sleep.addWidget(self.label_sleep_time, 0, 0)
        self.gridLayout_sleep.addWidget(self.timeEdit_sleep, 0, 1)
        self.gridLayout_sleep.addWidget(self.label_wake_time, 1, 0)
        self.gridLayout_sleep.addWidget(self.timeEdit_wake, 1, 1)
        self.gridLayout_sleep.addWidget(self.label_quality, 2, 0)
        self.gridLayout_sleep.addWidget(self.spinBox_quality, 2, 1)
        self.verticalLayout_scroll.addWidget(self.groupBox_sleep)

        # Medication
        self.groupBox_medication = QGroupBox("Medication", self.scrollAreaWidgetContents)
        self.verticalLayout_medication = QVBoxLayout(self.groupBox_medication)
        self.button_add_medication = QPushButton("Add Medication", self.groupBox_medication)
        self.medication_entries_layout = QVBoxLayout()
        self.verticalLayout_medication.addWidget(self.button_add_medication)
        self.verticalLayout_medication.addLayout(self.medication_entries_layout)
        self.verticalLayout_scroll.addWidget(self.groupBox_medication)

        # Daily State
        self.groupBox_daily_state = QGroupBox("Daily State", self.scrollAreaWidgetContents)
        self.gridLayout_daily_state = QGridLayout(self.groupBox_daily_state)
        self.label_alertness = QLabel("Daytime alertness level:", self.groupBox_daily_state)
        self.spinBox_alertness = QSpinBox(self.groupBox_daily_state)
        self.label_screen = QLabel("Screen time (hours):", self.groupBox_daily_state)
        self.spinBox_screen = QSpinBox(self.groupBox_daily_state)
        self.label_activity = QLabel("Physical activity level:", self.groupBox_daily_state)
        self.combo_activity = QComboBox(self.groupBox_daily_state)
        self.combo_activity.addItems(["none", "low", "moderate", "intense"])
        self.label_stress = QLabel("Stress level:", self.groupBox_daily_state)
        self.spinBox_stress = QSpinBox(self.groupBox_daily_state)
        self.label_mood = QLabel("Mood after waking:", self.groupBox_daily_state)
        self.combo_mood = QComboBox(self.groupBox_daily_state)
        self.combo_mood.addItems(["groggy", "normal", "energetic"])
        self.label_meals = QLabel("Number of meals today:", self.groupBox_daily_state)
        self.spinBox_meals = QSpinBox(self.groupBox_daily_state)
        self.label_smoking = QLabel("Used smoking/alcohol today", self.groupBox_daily_state)
        self.checkBox_smoke = QCheckBox(self.groupBox_daily_state)
        self.lineEdit_smoke_detail = QLineEdit(self.groupBox_daily_state)
        self.lineEdit_smoke_detail.setPlaceholderText("if yes, specify amount")
        self.label_social = QLabel("How was your social environment today?", self.groupBox_daily_state)
        self.combo_social = QComboBox(self.groupBox_daily_state)
        self.combo_social.addItems(["alone at home", "with family or friends (at home)", "outside in social settings", "socially isolated avoided people"])
        self.label_caffeine = QLabel("How much caffeine did you consume today?", self.groupBox_daily_state)
        self.combo_caffeine = QComboBox(self.groupBox_daily_state)
        self.combo_caffeine.addItems(["none", "1 small cup", "2-3 cups", "4+ cups", "energy drink/cola", "I don't remember"])

        # Add widgets to layout
        self.gridLayout_daily_state.addWidget(self.label_alertness, 0, 0)
        self.gridLayout_daily_state.addWidget(self.spinBox_alertness, 0, 1)
        self.gridLayout_daily_state.addWidget(self.label_screen, 1, 0)
        self.gridLayout_daily_state.addWidget(self.spinBox_screen, 1, 1)
        self.gridLayout_daily_state.addWidget(self.label_activity, 2, 0)
        self.gridLayout_daily_state.addWidget(self.combo_activity, 2, 1)
        self.gridLayout_daily_state.addWidget(self.label_stress, 3, 0)
        self.gridLayout_daily_state.addWidget(self.spinBox_stress, 3, 1)
        self.gridLayout_daily_state.addWidget(self.label_mood, 4, 0)
        self.gridLayout_daily_state.addWidget(self.combo_mood, 4, 1)
        self.gridLayout_daily_state.addWidget(self.label_meals, 5, 0)
        self.gridLayout_daily_state.addWidget(self.spinBox_meals, 5, 1)
        self.gridLayout_daily_state.addWidget(self.label_smoking, 6, 0)
        self.gridLayout_daily_state.addWidget(self.checkBox_smoke, 6, 1)
        self.gridLayout_daily_state.addWidget(self.lineEdit_smoke_detail, 7, 0, 1, 2)
        self.gridLayout_daily_state.addWidget(self.label_social, 8, 0)
        self.gridLayout_daily_state.addWidget(self.combo_social, 8, 1)
        self.gridLayout_daily_state.addWidget(self.label_caffeine, 9, 0)
        self.gridLayout_daily_state.addWidget(self.combo_caffeine, 9, 1)
        self.verticalLayout_scroll.addWidget(self.groupBox_daily_state)

        # Daily Summary
        self.groupBox_summary = QGroupBox("Daily Summary", self.scrollAreaWidgetContents)
        self.verticalLayout_summary = QVBoxLayout(self.groupBox_summary)
        self.horizontalLayout_summary_feel = QHBoxLayout()
        self.label_summary_feel = QLabel("How did you feel today?", self.groupBox_summary)
        self.combo_day_summary = QComboBox(self.groupBox_summary)
        self.combo_day_summary.addItems(["had trouble sleeping", "felt sleepy all day", "felt normal", "felt good/energetic"])
        self.textedit_daily_note = QPlainTextEdit(self.groupBox_summary)
        self.textedit_daily_note.setMinimumSize(QSize(0, 80))
        self.textedit_daily_note.setPlaceholderText("Daily Note (optional)")
        self.horizontalLayout_summary_feel.addWidget(self.label_summary_feel)
        self.horizontalLayout_summary_feel.addWidget(self.combo_day_summary)
        self.verticalLayout_summary.addLayout(self.horizontalLayout_summary_feel)
        self.verticalLayout_summary.addWidget(self.textedit_daily_note)
        self.verticalLayout_scroll.addWidget(self.groupBox_summary)

        # Save Button
        self.pushButton_save = QPushButton("Save", self.scrollAreaWidgetContents)
        self.verticalLayout_scroll.addWidget(self.pushButton_save)

        # Final assembly
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_main.addWidget(self.scrollArea)

        QMetaObject.connectSlotsByName(Form)

        # ðŸŒŸ Signal connections
        self.button_add_medication.clicked.connect(self.add_medication_entry)
        self.pushButton_save.clicked.connect(self.save_data)

    def add_medication_entry(self):
        name_edit = QLineEdit()
        name_edit.setPlaceholderText("Medication name")
        time_edit = QTimeEdit()
        dose_edit = QLineEdit()
        dose_edit.setPlaceholderText("Dosage (e.g. 50 mg)")
        layout = QHBoxLayout()
        layout.addWidget(name_edit)
        layout.addWidget(time_edit)
        layout.addWidget(dose_edit)
        container = QWidget()
        container.setLayout(layout)
        self.medication_entries_layout.addWidget(container)

    def save_data(self):
        data = {
            "date": self.dateEdit.date().toString("yyyy-MM-dd"),
            "sleep_time": self.timeEdit_sleep.time().toString("HH:mm"),
            "wake_time": self.timeEdit_wake.time().toString("HH:mm"),
            "sleep_quality": self.spinBox_quality.value(),
            "medications": [],
            "alertness": self.spinBox_alertness.value(),
            "screen_time": self.spinBox_screen.value(),
            "activity": self.combo_activity.currentText(),
            "stress": self.spinBox_stress.value(),
            "mood": self.combo_mood.currentText(),
            "meals": self.spinBox_meals.value(),
            "smoking": self.checkBox_smoke.isChecked(),
            "smoking_detail": self.lineEdit_smoke_detail.text(),
            "social_env": self.combo_social.currentText(),
            "caffeine": self.combo_caffeine.currentText(),
            "summary_feel": self.combo_day_summary.currentText(),
            "daily_note": self.textedit_daily_note.toPlainText()
        }

        for i in range(self.medication_entries_layout.count()):
            item = self.medication_entries_layout.itemAt(i).widget()
            if item:
                layout = item.layout()
                med_name = layout.itemAt(0).widget().text()
                med_time = layout.itemAt(1).widget().time().toString("HH:mm")
                med_dose = layout.itemAt(2).widget().text()
                data["medications"].append({
                    "name": med_name,
                    "time": med_time,
                    "dose": med_dose
                })

        os.makedirs("data", exist_ok=True)
        path = os.path.join("data", f"{data['date']}.json")
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        # âœ… Popup confirmation
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Icon.Information)
        msg_box.setWindowTitle("Success")
        msg_box.setText("Daily entry has been saved successfully!")
        msg_box.exec()

